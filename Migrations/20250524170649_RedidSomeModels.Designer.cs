// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OhmZone_ProiectLicenta.Data;

#nullable disable

namespace OhmZone_ProiectLicenta.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250524170649_RedidSomeModels")]
    partial class RedidSomeModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ForumPost", b =>
                {
                    b.Property<int>("ThreadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThreadID"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThreadID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ForumThreads");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.Brand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubcategoryID")
                        .HasColumnType("int");

                    b.HasKey("BrandID");

                    b.HasIndex("SubcategoryID");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.Device", b =>
                {
                    b.Property<int>("DeviceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceID"));

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceID");

                    b.HasIndex("BrandID");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.ForumCategories", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("ForumCategories");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.ForumReplies", b =>
                {
                    b.Property<int>("ReplyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int>("ThreadID")
                        .HasColumnType("int");

                    b.Property<int>("Upvote")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReplyID");

                    b.HasIndex("ThreadID");

                    b.HasIndex("UserID");

                    b.ToTable("ForumReplies");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.GuideComments", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int>("GuideID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("GuideID");

                    b.HasIndex("UserID");

                    b.ToTable("GuideComments");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.GuideStep", b =>
                {
                    b.Property<int>("GuideStepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuideStepID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuideID")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int");

                    b.HasKey("GuideStepID");

                    b.HasIndex("GuideID");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.RepairGuide", b =>
                {
                    b.Property<int>("GuideID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuideID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceID")
                        .HasColumnType("int");

                    b.Property<string>("Part")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuideID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("DeviceID");

                    b.ToTable("RepairGuides");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.RoboticsTutorials", b =>
                {
                    b.Property<int>("TutorialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TutorialID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TutorialID");

                    b.HasIndex("AuthorID");

                    b.ToTable("RoboticsTutorials");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.Subcategory", b =>
                {
                    b.Property<int>("SubcategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubcategoryID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Nmae")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubcategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.Users", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ForumPost", b =>
                {
                    b.HasOne("OhmZone_ProiectLicenta.Models.Users", "Author")
                        .WithMany("ForumThreads")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OhmZone_ProiectLicenta.Models.ForumCategories", "Category")
                        .WithMany("ForumThreads")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.Brand", b =>
                {
                    b.HasOne("OhmZone_ProiectLicenta.Models.Subcategory", "Subcategory")
                        .WithMany("Brands")
                        .HasForeignKey("SubcategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.Device", b =>
                {
                    b.HasOne("OhmZone_ProiectLicenta.Models.Brand", "Brand")
                        .WithMany("Devices")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.ForumReplies", b =>
                {
                    b.HasOne("ForumPost", "Thread")
                        .WithMany("ForumReplies")
                        .HasForeignKey("ThreadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OhmZone_ProiectLicenta.Models.Users", "User")
                        .WithMany("ForumReplies")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thread");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.GuideComments", b =>
                {
                    b.HasOne("OhmZone_ProiectLicenta.Models.RepairGuide", "Guide")
                        .WithMany("GuideComments")
                        .HasForeignKey("GuideID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OhmZone_ProiectLicenta.Models.Users", "User")
                        .WithMany("GuideComments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Guide");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.GuideStep", b =>
                {
                    b.HasOne("OhmZone_ProiectLicenta.Models.RepairGuide", "Guide")
                        .WithMany("Steps")
                        .HasForeignKey("GuideID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guide");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.RepairGuide", b =>
                {
                    b.HasOne("OhmZone_ProiectLicenta.Models.Users", "Author")
                        .WithMany("RepairGuides")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OhmZone_ProiectLicenta.Models.Category", "Category")
                        .WithMany("RepairGuides")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OhmZone_ProiectLicenta.Models.Device", "Device")
                        .WithMany("RepairGuides")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.RoboticsTutorials", b =>
                {
                    b.HasOne("OhmZone_ProiectLicenta.Models.Users", "Author")
                        .WithMany("RoboticsTutorials")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.Subcategory", b =>
                {
                    b.HasOne("OhmZone_ProiectLicenta.Models.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ForumPost", b =>
                {
                    b.Navigation("ForumReplies");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.Brand", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.Category", b =>
                {
                    b.Navigation("RepairGuides");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.Device", b =>
                {
                    b.Navigation("RepairGuides");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.ForumCategories", b =>
                {
                    b.Navigation("ForumThreads");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.RepairGuide", b =>
                {
                    b.Navigation("GuideComments");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.Subcategory", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("OhmZone_ProiectLicenta.Models.Users", b =>
                {
                    b.Navigation("ForumReplies");

                    b.Navigation("ForumThreads");

                    b.Navigation("GuideComments");

                    b.Navigation("RepairGuides");

                    b.Navigation("RoboticsTutorials");
                });
#pragma warning restore 612, 618
        }
    }
}
